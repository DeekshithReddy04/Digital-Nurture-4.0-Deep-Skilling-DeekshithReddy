-- Enable DBMS Output
SET SERVEROUTPUT ON;

-- Drop and recreate tables
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE accounts';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE employees';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

-- Create tables
CREATE TABLE accounts (
    account_id   NUMBER PRIMARY KEY,
    customer_id  NUMBER,
    account_type VARCHAR2(20),
    balance      NUMBER(10,2)
);

CREATE TABLE employees (
    emp_id     NUMBER PRIMARY KEY,
    name       VARCHAR2(50),
    department VARCHAR2(50),
    salary     NUMBER(10,2)
);

-- Insert sample data
INSERT INTO accounts VALUES (1, 101, 'savings', 10000);
INSERT INTO accounts VALUES (2, 101, 'checking', 5000);
INSERT INTO accounts VALUES (3, 102, 'savings', 20000);
INSERT INTO accounts VALUES (4, 103, 'savings', 15000);

INSERT INTO employees VALUES (201, 'Alice', 'HR', 50000);
INSERT INTO employees VALUES (202, 'Bob', 'IT', 60000);
INSERT INTO employees VALUES (203, 'Charlie', 'IT', 65000);
INSERT INTO employees VALUES (204, 'Diana', 'Finance', 70000);

COMMIT;

--------------------------------------------------------
-- 1. Stored Procedure: Process Monthly Interest
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS
BEGIN
    FOR acc IN (SELECT account_id, balance FROM accounts WHERE account_type = 'savings') LOOP
        UPDATE accounts
        SET balance = balance + (acc.balance * 0.01)
        WHERE account_id = acc.account_id;

        DBMS_OUTPUT.PUT_LINE('Interest added to Account ' || acc.account_id);
    END LOOP;

    COMMIT;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Executing ProcessMonthlyInterest ---');
    ProcessMonthlyInterest;
END;
/

--------------------------------------------------------
-- 2. Stored Procedure: UpdateEmployeeBonus
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus (
    dept_name IN VARCHAR2,
    bonus_percent IN NUMBER
) IS
BEGIN
    FOR emp IN (SELECT emp_id, salary FROM employees WHERE department = dept_name) LOOP
        UPDATE employees
        SET salary = salary + (salary * bonus_percent / 100)
        WHERE emp_id = emp.emp_id;

        DBMS_OUTPUT.PUT_LINE('Bonus added for Employee ID ' || emp.emp_id);
    END LOOP;

    COMMIT;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Executing UpdateEmployeeBonus for IT dept, 10% ---');
    UpdateEmployeeBonus('IT', 10);
END;
/

--------------------------------------------------------
-- 3. Stored Procedure: TransferFunds
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE TransferFunds (
    from_account IN NUMBER,
    to_account IN NUMBER,
    amount IN NUMBER
) IS
    insufficient_funds EXCEPTION;
    current_balance NUMBER;
BEGIN
    -- Get balance of from_account
    SELECT balance INTO current_balance FROM accounts WHERE account_id = from_account FOR UPDATE;

    -- Check if sufficient funds
    IF current_balance < amount THEN
        RAISE insufficient_funds;
    END IF;

    -- Deduct from source
    UPDATE accounts
    SET balance = balance - amount
    WHERE account_id = from_account;

    -- Add to target
    UPDATE accounts
    SET balance = balance + amount
    WHERE account_id = to_account;

    DBMS_OUTPUT.PUT_LINE('₹' || amount || ' transferred from A/c ' || from_account || ' to A/c ' || to_account);

    COMMIT;

EXCEPTION
    WHEN insufficient_funds THEN
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient balance in account ' || from_account);
        ROLLBACK;
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: One of the accounts does not exist.');
        ROLLBACK;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Executing TransferFunds: ₹2000 from A/c 1 to A/c 2 ---');
    TransferFunds(1, 2, 2000);
END;
/

--------------------------------------------------------
-- Final Outputs
--------------------------------------------------------

-- Show account balances
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Final Account Balances ---');
    FOR rec IN (SELECT * FROM accounts) LOOP
        DBMS_OUTPUT.PUT_LINE('Account ' || rec.account_id || ' | Type: ' || rec.account_type || ' | Balance: ₹' || rec.balance);
    END LOOP;
END;
/

-- Show employee salaries
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Final Employee Salaries ---');
    FOR rec IN (SELECT * FROM employees) LOOP
        DBMS_OUTPUT.PUT_LINE('Emp ID: ' || rec.emp_id || ' | Name: ' || rec.name || ' | Dept: ' || rec.department || ' | Salary: ₹' || rec.salary);
    END LOOP;
END;
/
